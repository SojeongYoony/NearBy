/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.72
 * Generated at: 2021-12-14 16:24:20 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class insert_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("jar:file:/D:/SmartWeb0809/springstudy/nearby/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/NEARBY/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1638721606326L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title>Insert title here</title>\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.6.0.js\" integrity=\"sha256-H+K7U5CnXl1h5ywQfKtSj8PCmoN9aaq30gDh27Xc0jk=\" crossorigin=\"anonymous\"></script>\n");
      out.write("<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css\" integrity=\"sha512-1ycn6IcaQQ40/MKBW2W4Rhis/DbILU74C1vSrLJxCq57o941Ym01SwNsOMqvEBFlcgUa6xLiPY/NS5R+E6ztJQ==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\" />\n");
      out.write(" <script type=\"text/javascript\" src=\"https://openapi.map.naver.com/openapi/v3/maps.js?ncpClientId=4lnq99nnpg&submodules=geocoder\"></script>\n");
      out.write("<script>\n");
      out.write("  $(document).ready(function(){\n");
      out.write("		fnFileCheck();\n");
      out.write("		$(\"#file\").click(function(){\n");
      out.write("			$(\"#map\").css('display', 'none');\n");
      out.write("		})\n");
      out.write("		\n");
      out.write("	});\n");
      out.write("	\n");
      out.write("	function fnFileCheck(){\n");
      out.write("		\n");
      out.write("		$(\"#file\").on('change',function(){\n");
      out.write("			let origin = $(this).val();      // 첨부된 파일명\n");
      out.write("			let extName = origin.substring(origin.lastIndexOf(\".\")+1 ).toUpperCase();     // 확장자 대문자로 저장 \n");
      out.write("			\n");
      out.write("			// 확장자 정보\n");
      out.write("			if( $.inArray(extName, [\"JPG\", \"PNG\", \"JPEG\", \"GIF\",\"MP4\", \"MPEG\", \"AVI\", 'MOV'])  == -1 )  {  // 첨부된 파일이 [\"JPG\", \"PNG\", \"JPEC\", \"GIF\"] 중 하나가 아니면\n");
      out.write("			 	alert('확장자가 jpg, png, jpeG, gif인 파일만 업로드가 가능합니다.');\n");
      out.write("				$(this).val('');\n");
      out.write("				return;\n");
      out.write("		   }\n");
      out.write("			\n");
      out.write("			// 파일크기점검\n");
      out.write("			let maxSize = 1024 * 1024 * 1000;   		   // 최대크기 10MB\n");
      out.write("			let fileSize = $(this)[0].files[0].size;       // 첨부된 파일 크기\n");
      out.write("			if ( fileSize > maxSize ){\n");
      out.write("				alert('1GB 이하의 파일만 업로드가 가능합니다.');\n");
      out.write("				$(this).val('');\n");
      out.write("				return;\n");
      out.write("			}\n");
      out.write("		});\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("	\n");
      out.write("	function map() {\n");
      out.write("		$(\"#map\").css('display', 'block');\n");
      out.write("		\n");
      out.write("		var map = new naver.maps.Map(\"map\", {\n");
      out.write("			  center: new naver.maps.LatLng(37.55415109162072, 126.93582461156707),\n");
      out.write("			  zoom: 15,\n");
      out.write("			  mapTypeControl: true\n");
      out.write("			});\n");
      out.write("\n");
      out.write("			var infoWindow = new naver.maps.InfoWindow({\n");
      out.write("			  anchorSkew: true\n");
      out.write("			});\n");
      out.write("\n");
      out.write("			map.setCursor('pointer');\n");
      out.write("\n");
      out.write("\n");
      out.write("	 // 포인트같음\n");
      out.write("	function searchCoordinateToAddress(latlng) {\n");
      out.write("\n");
      out.write("		  infoWindow.close();\n");
      out.write("\n");
      out.write("		  naver.maps.Service.reverseGeocode({\n");
      out.write("		    coords: latlng,\n");
      out.write("		    orders: [\n");
      out.write("		      naver.maps.Service.OrderType.ADDR,\n");
      out.write("		      naver.maps.Service.OrderType.ROAD_ADDR\n");
      out.write("		    ].join(',')\n");
      out.write("		  }, function(status, response) {\n");
      out.write("		    if (status === naver.maps.Service.Status.ERROR) {\n");
      out.write("		      if (!latlng) {\n");
      out.write("		        return alert('다시 입력해주세요');\n");
      out.write("		        //alert('ReverseGeocode Error, Please check latlng');\n");
      out.write("		      }\n");
      out.write("		      if (latlng.toString) {\n");
      out.write("		        return  alert('다시 입력해주세요');\n");
      out.write("		        // alert('ReverseGeocode Error, latlng:' + latlng.toString());\n");
      out.write("		      }\n");
      out.write("		      if (latlng.x && latlng.y) {\n");
      out.write("		        return  alert('다시 입력해주세요'); \n");
      out.write("		        // alert('ReverseGeocode Error, x:' + latlng.x + ', y:' + latlng.y);\n");
      out.write("		      }\n");
      out.write("		      return  alert('다시 입력해주세요'); \n");
      out.write("		      // alert('ReverseGeocode Error, Please check latlng');\n");
      out.write("		    }\n");
      out.write("\n");
      out.write("		    var address = response.v2.address,\n");
      out.write("		        htmlAddresses = [];\n");
      out.write("		    \n");
      out.write("			\n");
      out.write("		    document.insertBoard_Form.location.value = address.jibunAddress;\n");
      out.write("		    var sub = address.jibunAddress.split(' ');\n");
      out.write("		    var nearbyAddress = sub[0]+\" \"+sub[1]+\" \"+sub[2];\n");
      out.write("		    document.insertBoard_Form.location.value = nearbyAddress;\n");
      out.write("		    document.insertBoard_Form.addr_remove.value ='';\n");
      out.write("\n");
      out.write("		    if (address.jibunAddress !== '') {\n");
      out.write("		//        htmlAddresses.push('[지번 주소] ' + address.jibunAddress);\n");
      out.write("		        htmlAddresses.push(address.jibunAddress);\n");
      out.write("		    }\n");
      out.write("\n");
      out.write("// 		    if (address.roadAddress !== '') {\n");
      out.write("// 		        htmlAddresses.push('[도로명 주소] ' + address.roadAddress);\n");
      out.write("// 		    }\n");
      out.write("\n");
      out.write("		    infoWindow.setContent([\n");
      out.write("		      '<div style=\"padding:10px;min-width:100px;line-height:100%;font-size:10px;\">',\n");
      out.write("// 		      '<p style=\"margin-top:1px;\">검색 좌표</p><br />',\n");
      out.write("		      htmlAddresses.join('<br />'),\n");
      out.write("		      '</div>'\n");
      out.write("		    ].join('\\n'));\n");
      out.write("\n");
      out.write("		    infoWindow.open(map, latlng);\n");
      out.write("		  });\n");
      out.write("		}\n");
      out.write("	 \n");
      out.write("	 //검색했을 때\n");
      out.write("	function searchAddressToCoordinate(address) {\n");
      out.write("		  naver.maps.Service.geocode({\n");
      out.write("		    query: address\n");
      out.write("		  }, function(status, response) {\n");
      out.write("		    if (status === naver.maps.Service.Status.ERROR) {\n");
      out.write("		      if (!address) {\n");
      out.write("		        return alert('죄송합니다. 다시 입력해주세요');\n");
      out.write("		        // alert('Geocode Error, Please check address');\n");
      out.write("		      }\n");
      out.write("		      return  alert('죄송합니다. 다시 입력해주세요');\n");
      out.write("		      //alert('Geocode Error, address:' + address);\n");
      out.write("		    }\n");
      out.write("\n");
      out.write("		    if (response.v2.meta.totalCount === 0) {\n");
      out.write("		      return  alert('죄송합니다. 다시 입력해주세요');\n");
      out.write("		      // alert('No result.');\n");
      out.write("		    }\n");
      out.write("		    \n");
      out.write("\n");
      out.write("		    var htmlAddresses = [],\n");
      out.write("		      item = response.v2.addresses[0],\n");
      out.write("		      point = new naver.maps.Point(item.x, item.y);\n");
      out.write("		    console.log(item);	  // item 객체에 지번, 도로명, 위도, 경도 필드존재함\n");
      out.write("		    document.insertBoard_Form.location.value = item.jibunAddress;\n");
      out.write("		    console.log(item.jibunAddress);\n");
      out.write("		    var sub = item.jibunAddress.split(' ');\n");
      out.write("		   \n");
      out.write("		    var nearbyAddress = sub[0]+\" \"+sub[1]+\" \"+sub[2];\n");
      out.write("		    document.insertBoard_Form.location.value = nearbyAddress;\n");
      out.write("		    console.log(nearbyAddress )\n");
      out.write("		    \n");
      out.write("		    \n");
      out.write("         // 주소 검색 할 때 item.x   item.y\n");
      out.write("		    if (item.roadAddress) {\n");
      out.write("		//    htmlAddresses.push('[도로명 주소] ' + item.roadAddress);\n");
      out.write("		//    htmlAddresses.push('[도로명 주소] ' + item.roadAddress);\n");
      out.write("		\n");
      out.write("		    }\n");
      out.write("\n");
      out.write("		    if (item.jibunAddress) {\n");
      out.write("//		      htmlAddresses.push('[지번 주소] ' + item.jibunAddress);\n");
      out.write("	      htmlAddresses.push( item.jibunAddress);\n");
      out.write("		    }\n");
      out.write("\n");
      out.write("// 		    if (item.englishAddress) {\n");
      out.write("// 		      htmlAddresses.push('[영문명 주소] ' + item.englishAddress);\n");
      out.write("// 		    }\n");
      out.write("\n");
      out.write("\n");
      out.write("		    infoWindow.setContent([\n");
      out.write("		      '<div style=\"padding:10px;min-width:50px;line-height:100%;font-size:10px;\">',\n");
      out.write("// 		      '<p style=\"margin-top:5px;\">검색 주소 : '+ address +'</p><br />',\n");
      out.write("		      htmlAddresses.join('<br />'),\n");
      out.write("		      '</div>'\n");
      out.write("		    ].join('\\n'));\n");
      out.write("			\n");
      out.write("		    map.setCenter(point);\n");
      out.write("		    infoWindow.open(map, point);\n");
      out.write("		    \n");
      out.write("		  });\n");
      out.write("		}\n");
      out.write("	\n");
      out.write("	function initGeocoder() {\n");
      out.write("		  if (!map.isStyleMapReady) {\n");
      out.write("		    return;\n");
      out.write("		  }\n");
      out.write("\n");
      out.write("		  map.addListener('click', function(e) {\n");
      out.write("		    searchCoordinateToAddress(e.coord);\n");
      out.write("	\n");
      out.write("		   // alert(e.coord.lat() + ', ' + e.coord.lng());  // 클릭하면 위도경도\n");
      out.write("	\n");
      out.write("		  });\n");
      out.write("\n");
      out.write("		  $('#address').on('keydown', function(e) {\n");
      out.write("		    var keyCode = e.which;\n");
      out.write("\n");
      out.write("		    if (keyCode === 13) { // Enter Key\n");
      out.write("		      searchAddressToCoordinate($('#address').val());\n");
      out.write("		    }\n");
      out.write("		  });\n");
      out.write("\n");
      out.write("		  $('#submit').on('click', function(e) {\n");
      out.write("		    e.preventDefault();\n");
      out.write("\n");
      out.write("		    searchAddressToCoordinate($('#address').val());\n");
      out.write("		  });\n");
      out.write("\n");
      out.write("		  searchAddressToCoordinate('노고산동 106-1');\n");
      out.write("		}\n");
      out.write("\n");
      out.write("		naver.maps.onJSContentLoaded = initGeocoder;\n");
      out.write("		naver.maps.Event.once(map, 'init_stylemap', initGeocoder);\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("	\n");
      out.write("	\n");
      out.write("</script>\n");
      out.write("<style>\n");
      out.write("   #map {\n");
      out.write("     display:none;\n");
      out.write("   }\n");
      out.write("   .search { position:absolute;z-index:1000;top:15px;left:15px; }\n");
      out.write("   .search #address { width:280px;height:20px;line-height:20px;border:solid 1px #555;padding:5px;font-size:12px;box-sizing:content-box; }\n");
      out.write("   .search #submit { height:30px;line-height:30px;padding:0 10px;font-size:12px;border:solid 1px #555;border-radius:3px;cursor:pointer;box-sizing:content-box; }\n");
      out.write("   .location {   width:280px;height:20px;line-height:20px;border:none; padding:5px; padding-left:10px; font-size:10px;  }\n");
      out.write("   input::placeholder {  font-size: 6px;	}\n");
      out.write("</style>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("	\n");
      out.write("	<h1>업로드 화면</h1>\n");
      out.write("	\n");
      out.write("	<form id=\"insertBoard_Form\" action=\"/nearby/board/insertBoard\" method=\"post\" enctype=\"multipart/form-data\" name=\"insertBoard_Form\">\n");
      out.write("		<b>작성자</b><br>\n");
      out.write("		");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${loginUser.id}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("<br><br>\n");
      out.write("		<input type=\"hidden\" name=\"id\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${loginUser.id}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\">\n");
      out.write("	\n");
      out.write("	     <b>내 위치 > <i class=\"fas fa-map-marker-alt\" style=\"color:pink; font-size:15px;\" onclick=\"map()\"></i>\n");
      out.write("	     	<input type=\"text\" name=\"location\" class=\"location\" value=\"\" >\n");
      out.write("	     \n");
      out.write("	     </b><br>\n");
      out.write("	     <div id=\"map_wrap\"></div>\n");
      out.write("	    \n");
      out.write("	<div id=\"map\" style=\"width:500px; height:200px;\">\n");
      out.write("        <div class=\"search\" style=\"\">\n");
      out.write("            <input id=\"address\" type=\"text\" name=\"addr_remove\" placeholder=\"주소를 입력해주세요(ex. 서울특별시, 마포구, 노고산동)\"  />\n");
      out.write("            <input id=\"submit\" type=\"button\" value=\"주소 검색\" />\n");
      out.write("        </div>\n");
      out.write("        \n");
      out.write("    </div>\n");
      out.write("   \n");
      out.write("	    \n");
      out.write("	    <br><br>\n");
      out.write("		<b>사진 업로드</b><br>\n");
      out.write("		<div style=\"border:1px solid black; width:480px; height: 320px; padding:30px; font-size:30px;\">\n");
      out.write("			  <label for=\"file\"> <i class=\"fas fa-photo-video\" id=\"upload\" style=\"color:pink; font-size:40px;\"></i>\n");
      out.write("			       사진 / 동영상을 올려주세요   </label>\n");
      out.write("		</div>\n");
      out.write("		<input type=\"file\" name=\"file\" id=\"file\" style=\"display:none;\">\n");
      out.write("		\n");
      out.write("				\n");
      out.write("		<b>내용</b><br>\n");
      out.write("		<input type=\"text\" name=\"content\"><br><br>\n");
      out.write("		\n");
      out.write("		<button>작성완료</button>\n");
      out.write("		<input type=\"button\" value=\"목록\" onclick=\"location.href='/nearby/board/boardList'\">\n");
      out.write("	\n");
      out.write("	\n");
      out.write("	</form>\n");
      out.write("\n");
      out.write("	\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
